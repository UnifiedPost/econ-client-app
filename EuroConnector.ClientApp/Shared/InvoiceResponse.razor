@using EuroConnector.ClientApp.Data.Interfaces
@using EuroConnector.ClientApp.Data.Models;

@inject IDocumentService DocumentService;

<MudDialog @bind-IsVisible="IsOpen" OnBackdropClick="Close">
    <DialogContent>
        <EconSelect T="string" Label="Response Code" @bind-Value="responseCode" Style="width: 350px;">
            @foreach (var item in InvoiceResponseHelper.GetResponseCodes())
            {
                <MudSelectItem Value="item.Code">@item.Label</MudSelectItem>
            }
        </EconSelect>
        <EconTextField T="string" Label="Description" @bind-Value="description" Style="width: 350px;" />
        @if (!string.IsNullOrEmpty(message))
        {
            <MudText Typo="Typo.caption" Color="Color.Error">@message</MudText>
        }
    </DialogContent>
    <DialogActions>
        <EconButton OnClick="Send">Send</EconButton>
        <EconButton OnClick="Close">Close</EconButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public DocumentMetadata Document { get; set; }
    [Parameter]
    public bool IsOpen { get; set; }

    string responseCode;
    string description;
    string message;

    private async Task Send()
    {
        message = string.Empty;
        if (string.IsNullOrEmpty(responseCode))
        {
            message = "Response Code is required.";
            return;
        }

        if ((responseCode == "UQ" || responseCode == "CA" || responseCode == "AP") && string.IsNullOrEmpty(description))
        {
            message = "Description is required with the selected response code.";
            return;
        }

        var invoiceResponseContent = InvoiceResponseHelper.CreateInvoiceResponse(Document, responseCode, description);

        await DocumentService.SendInvoiceResponse(invoiceResponseContent);

        IsOpen = false;
    }

    private void Close() => IsOpen = false;
}
