@using EuroConnector.ClientApp.Data.Interfaces;
@using EuroConnector.ClientApp.Data.Models;
@using System.Text;
@using System.Net.Http.Json;

@inject ILogger Logger;
@inject ISnackbar Snackbar;
@inject IDocumentService DocumentService;

<div style="margin: 5px 0;">
    @if (receivedDocuments is not null && receivedDocuments?.Documents.Count() > 0)
    {
        <MudDataGrid Items="@receivedDocuments.Documents" Dense="true" ReadOnly="true" Elevation="4" HeaderClass="grid-header"
                     RowsPerPage="10" Loading="loading" LoadingProgressColor="Color.Secondary">
            <Columns>
                <PropertyColumn Property="x => x.DocumentId" Title="Document ID" />
                <PropertyColumn Property="x => x.DocumentType" Title="Document Type" />
                <PropertyColumn Property="x => x.Status" Title="Status" />
                <TemplateColumn CellClass="button-cells">
                    <CellTemplate>
                        <MudTooltip Text="View Document Data">
                            <MudIconButton Icon="fa-solid fa-eye" OnClick="() => ViewDocument(context.Item.DocumentId)" Size="Size.Small" />
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn CellStyle="button-cells">
                    <CellTemplate>
                        <MudTooltip Text="Download Document">
                            <MudIconButton Icon="fa-solid fa-download" OnClick="() => Download(context.Item.DocumentId)" Size="Size.Small" />
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <div class="grid-footer">
                    <MudDataGridPager PageSizeOptions="@(new int[] {5, 10, 25} )" />
                </div>
            </PagerContent>
        </MudDataGrid>
    }

    <div style="margin-top: 5px;">
        <MudText>Total Documents: @(receivedDocuments?.Documents.Count() ?? 0)</MudText>
        <div class="button-group">
            <EconButton OnClick="@GetReceivedDocuments" Disabled="loading">Check For New Invoices</EconButton>
            <EconButton OnClick="@DownloadAll">Download All Documents</EconButton>
        </div>
    </div>

    <MudDialog OnBackdropClick="CloseMetadataView" @bind-IsVisible="isMetadataViewOpen">
        <DialogContent>
            @if (documentMetadata is null) 
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
            }
            else 
            {
                <DocumentMetadataView DocumentMetadata="documentMetadata"/>
            }
        </DialogContent>
        <DialogActions>
            <EconButton OnClick="CloseMetadataView">Close</EconButton>
        </DialogActions>
    </MudDialog>
</div>

@code {
    [CascadingParameter]
    public Error Error { get; set; }

    ReceivedDocuments receivedDocuments;
    DocumentMetadata documentMetadata;
    bool isMetadataViewOpen = false;
    bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        await GetReceivedDocuments();
    }

    private async Task GetReceivedDocuments()
    {
        loading = true;
        try
        {
            receivedDocuments = await DocumentService.ReceiveDocumentList();
        }
        catch (Exception ex)
        {
            Logger.Error(ex, "An error occured while receiving documents.");
            Error.ProcessError(ex);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task Download(string id)
    {
        try
        {
            await DownloadDocument(id);
            Snackbar.Add($"Document ID {id} successfully downloaded and saved in the outbox folder.", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.Error(ex, "An error occured while downloading document ID {DocumentId}", id);
            Error.ProcessError(ex);
        }
    }

    private async Task DownloadAll()
    {
        Logger.Information("Downloading all received documents.");
        loading = true;
        int failed = 0;

        foreach (var document in receivedDocuments.Documents)
        {
            try
            {
                await DownloadDocument(document.DocumentId);
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "An error occured while downloading document ID {DocumentId}", document.DocumentId);
                failed++;
            }
        }

        if (failed > 0) Snackbar.Add($"Download finished. {failed} documents failed. Check logs for more information.", Severity.Info);
        else Snackbar.Add("Download finished.", Severity.Success);
        loading = false;
        Logger.Information("Finished downloading all documents.");
    }

    private async Task DownloadDocument(string id)
    {
        var document = await DocumentService.DownloadDocument(id);
        await SaveDocument(document);

        await DocumentService.ChangeReceivedDocumentStatus(id);
    }

    private async Task ViewDocument(string id)
    {
        try
        {
            isMetadataViewOpen = true;
            var documentResponse = await DocumentService.ViewDocumentMetadata(id);
            var document = await documentResponse.Content.ReadFromJsonAsync<DocumentMetadataList>();
            documentMetadata = document.Documents.FirstOrDefault();

            if (documentMetadata is null)
            {
                isMetadataViewOpen = false;
                Snackbar.Add("No metadata was fetched for this document.", Severity.Info);
                Logger.Information("Document ID {DocumentId} has no metadata.", id);
            }
        }
        catch (Exception ex)
        {
            Logger.Error(ex, "An error occured while fetching document ID data {DocumentId}", id);
            Error.ProcessError(ex);
            isMetadataViewOpen = false;
        }
    }

    private async Task SaveDocument(DownloadedDocument document)
    {
        var inboxPath = Preferences.Get("inboxPath", string.Empty);
        if (string.IsNullOrEmpty(inboxPath)) throw new Exception("Inbox path is not set.");

        var inboxDir = new DirectoryInfo(inboxPath);
        if (!inboxDir.Exists) inboxDir.Create();

        var filename = $"{document.DocumentId}.xml";

        var content = Encoding.UTF8.GetString(document.DocumentContent);
        await File.WriteAllTextAsync(Path.Combine(inboxPath, filename), content);
    }

    private void CloseMetadataView() => isMetadataViewOpen = false;
}
