@using EuroConnector.ClientApp.Data.Interfaces
@using EuroConnector.ClientApp.Data.Models
@using System.Reflection
@using System.Text
@using System.Net.Http.Json
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using EuroConnector.ClientApp.Shared
@using System.Text.Json

@inject IDocumentService DocumentService;
@inject ILogger Logger;
@inject ISnackbar Snackbar;
@inject NavigationManager NavigationManager;

<style>
    .inv-resp .mud-dialog-title {
        background-color: var(--mud-palette-primary);
        color: white;
    }
</style>

<div>
    <MudText>Local files path: @LocalPath</MudText>
    <div style="margin: 5px 0;">
        <div class="button-group" style="margin: 0 0 5px 0;">
            <EconButton OnClick="GetDocuments">Refresh</EconButton>
            <div>
                <EconButton OnClick="ToggleFiltersPopover">Filter</EconButton>
                <MudPopover Open="@isFiltersPopoverOpen" AnchorOrigin="Origin.BottomLeft">
                    <div class="filter-popover">
                        <EconTextField Label="Document no." @bind-Value="filters.DocumentNo"/>
                        <EconTextField Label="Document Type" @bind-Value="filters.DocumentType"/>
                        <EconTextField Label="Sender Endpoint ID" @bind-Value="filters.SenderEndpointId"/>
                        <EconTextField Label="Sender Name" @bind-Value="filters.SenderName"/>
                        <EconTextField Label="Sender Entity Code" @bind-Value="filters.SenderEntityCode" />
                        <EconTextField Label="Sender VAT Number" @bind-Value="filters.SenderVatNumber" />
                        <EconTextField Label="Receiver Endpoint ID" @bind-Value="filters.RecipientEndpointId" />
                        <EconTextField Label="Receiver Name" @bind-Value="filters.RecipientName" />
                        <EconTextField Label="Receiver Entity Code" @bind-Value="filters.RecipientEntityCode" />
                        <EconTextField Label="Receiver VAT Number" @bind-Value="filters.RecipientVatNumber" />
                        <div class="date-range">
                            <EconDatePicker Label="Created From" @bind-Date="createdFrom"/>
                            <EconDatePicker Label="Created To" @bind-Date="createdTo"/>
                        </div>
                        <div class="date-range">
                            <EconDatePicker Label="Updated From" @bind-Date="updatedFrom"/>
                            <EconDatePicker Label="Updated To" @bind-Date="updatedTo"/>
                        </div>
                        <EconTextField Label="Document Reference" @bind-Value="filters.DocumentReference" />
                        <EconTextField Label="Document Status" @bind-Value="filters.Status" />
                        <EconTextField Label="Number Of Records" @bind-Value="filters.RecordsCountLimit" InputType="InputType.Number"/>
                        <div class="button-group filter-actions">
                            <EconButton OnClick="SetFilters">Apply</EconButton>
                            <EconButton OnClick="ClearFilters">Clear</EconButton>
                            <EconButton OnClick="ToggleFiltersPopover">Close</EconButton>
                        </div>
                    </div>
                </MudPopover>
            </div>
        </div>

        @if (documents is not null && documents?.Documents.Count() > 0)
        {
            <MudDataGrid Items="@documents.Documents" Dense="true" ReadOnly="true" Elevation="4" HeaderClass="grid-header"
                         RowsPerPage="10" Loading="loading" LoadingProgressColor="Color.Secondary">
                <Columns>
                    <PropertyColumn Property="x => x.DocumentId" Title="Document ID" />
                    <PropertyColumn Property="x => x.DocumentNo" Title="Document no." />
                    <PropertyColumn Property="@(x => FolderName == "outbox" ? x.RecipientName : x.SenderName)" Title="@(FolderName == "outbox" ? "Receiver Name" : "Sender Name")" />
                    <PropertyColumn Property="x => x.DocumentType" Title="Type" />
                    @* <PropertyColumn Property="x => x.Status" Title="Status" CellStyle="font-weight: bold;"/> *@
                    <TemplateColumn Title="Status">
                        <CellTemplate>
                            <MudText Typo="Typo.body2" Style="@(context.Item.Status == "New" ? "font-weight: bold;" : "")" Color="@(context.Item.Status == "Error" ? Color.Error : Color.Inherit)">
                                @context.Item.Status
                            </MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.CreatedAt" Title="Created At" />
                    <TemplateColumn HeaderStyle="@(FolderName == "outbox" ? "width: 120px;" : "width: 180px;")" Sortable="false">
                        <CellTemplate>
                            <MudTooltip Text="View Document Data">
                                <MudIconButton Icon="fa-solid fa-eye" OnClick="() => ViewDocument(context.Item.DocumentId)" Size="Size.Small" />
                            </MudTooltip>
                            <MudTooltip Text="Download Document">
                                <MudIconButton Icon="fa-solid fa-download" OnClick="() => Download(context.Item.DocumentId)" Size="Size.Small" Disabled="isDownloading"/>
                            </MudTooltip>
                            @if (FolderName == "inbox" && (context.Item.Status == "Received" && (context.Item.DocumentType == "Invoice" || context.Item.DocumentType == "CreditNote")))
                            {
                                <MudTooltip Text="Invoice Response">
                                    <MudIconButton Icon="fa-solid fa-file-invoice" OnClick="() => OpenInvoiceResponse(context.Item)" Size="Size.Small" />
                                </MudTooltip>
                            }
                            <MudTooltip Text="Response Status">
                                <MudIconButton Icon="fa-solid fa-info-circle" OnClick="() => ResponseStatus(context.Item)" Size="Size.Small" />
                            </MudTooltip>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <div class="grid-footer">
                        <MudDataGridPager PageSizeOptions="@(new int[] {5, 10, 25} )" />
                    </div>
                </PagerContent>
            </MudDataGrid>
        }

        <div style="margin-top: 5px;">
            <MudText>Total Documents: @(documents?.Documents.Count() ?? 0)</MudText>
        </div>

        <MudDialog OnBackdropClick="CloseMetadataView" @bind-IsVisible="isMetadataViewOpen">
            <DialogContent>
                @if (documentMetadata is null)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                }
                else
                {
                    <DocumentMetadataView DocumentMetadata="documentMetadata" />
                }
            </DialogContent>
            <DialogActions>
                <EconButton OnClick="CloseMetadataView">Close</EconButton>
            </DialogActions>
        </MudDialog>
        
        <InvoiceResponse Document="invRespDocumentMetadata" @bind-IsOpen="isInvoiceResponseOpen"/>
    </div>
</div>
@code {
    [CascadingParameter]
    public Error Error { get; set; }

    [Parameter]
    public string FolderName { get; set; }
    [Parameter]
    public string LocalPath { get; set; }

    DocumentSearchResponse documents;
    DocumentSearchRequest filters;
    DocumentMetadata documentMetadata;
    DocumentMetadata invRespDocumentMetadata;
    bool loading = false;
    bool isMetadataViewOpen = false;
    bool isInvoiceResponseOpen = false;
    bool isFiltersPopoverOpen = false;
    bool isDownloading = false;

    DateTime? createdFrom;
    DateTime? createdTo;
    DateTime? updatedFrom;
    DateTime? updatedTo;

    protected override async Task OnParametersSetAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        SetSavedFilters();
        if (query.Any()) SetFiltersByQuery(query);
        else if (filters is null) SetDefaultFilters();

        await GetDocuments();
    }

    private void SetDefaultFilters()
    {
        createdFrom = DateTime.Today.ToUniversalTime().AddDays(-30);
        createdTo = DateTime.UtcNow;
        updatedFrom = null;
        updatedTo = null;

        filters = new()
        {
            FolderName = FolderName,
            CreatedBetween = new List<DateTime?>() { createdFrom, createdTo },
            RecordsCountLimit = 100
        };
    }

    private async Task SetFilters()
    {
        isFiltersPopoverOpen = false;

        filters.CreatedBetween = new List<DateTime?>() { createdFrom?.ToUniversalTime(), createdTo?.ToUniversalTime() };
        if (filters.CreatedBetween.All(x => x is null)) filters.CreatedBetween = null;

        filters.UpdatedBetween = new List<DateTime?>() { updatedFrom?.ToUniversalTime(), updatedTo?.ToUniversalTime() };
        if (filters.UpdatedBetween.All(x => x is null)) filters.UpdatedBetween = null;

        SaveFilters();

        await GetDocuments();
    }

    private void SetFiltersByQuery(Dictionary<string, StringValues> query)
    {
        filters = new()
            {
                FolderName = query["folderName"],
                DocumentType = query["documentType"],
                DocumentReference = query["documentReference"],
                RecipientEndpointId = query.GetValueOrDefault("recipientEndpointId"),
                SenderEndpointId = query.GetValueOrDefault("senderEndpointId"),
            };
    }

    private async Task ClearFilters()
    {
        SetDefaultFilters();
        await GetDocuments();
    }

    private void SaveFilters()
    {
        filters.FolderName = FolderName;
        var filterJson = filters.ToJsonString();
        Preferences.Set(FolderName == "inbox" ? "inboxFilters" : "outboxFilters", filterJson, Assembly.GetExecutingAssembly().Location);
    }

    private void SetSavedFilters()
    {
        var filterJson = Preferences.Get(FolderName == "inbox" ? "inboxFilters" : "outboxFilters", string.Empty, Assembly.GetExecutingAssembly().Location);
        if (string.IsNullOrEmpty(filterJson)) return;

        filters = JsonSerializer.Deserialize<DocumentSearchRequest>(filterJson, JsonHelper.GetJsonSerializerOptions());
        filters.FolderName = FolderName;
        createdFrom = filters.CreatedBetween?.Min();
        createdTo = filters.CreatedBetween?.Max();
        updatedFrom = filters.UpdatedBetween?.Min();
        updatedTo = filters.UpdatedBetween?.Max();
    }

    private async Task GetDocuments()
    {
        loading = true;

        try
        {
            documents = await DocumentService.SearchDocuments(filters);
        }
        catch (Exception ex)
        {
            Logger.Error(ex, "An error occured while fetching the list of {Folder} documents.", FolderName);
            Error.ProcessError(ex);
        }

        loading = false;
    }

    private async Task Download(string id)
    {
        isDownloading = true;
        try
        {
            await DownloadDocument(id);
            Snackbar.Add($"Document ID {id} successfully downloaded and saved in the {FolderName} folder.", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.Error(ex, "An error occured while downloading document ID {DocumentId}", id);
            Error.ProcessError(ex);
        }
        isDownloading = false;
    }

    private async Task DownloadDocument(string id)
    {
        var document = await DocumentService.DownloadDocument(id);
        await SaveDocument(document);

        await DocumentService.ChangeReceivedDocumentStatus(id);
    }

    private async Task ViewDocument(string id)
    {
        documentMetadata = documents.Documents.Where(x => x.DocumentId == id).SingleOrDefault();
        isMetadataViewOpen = true;
        await DocumentService.ViewDocumentMetadata(id);
    }

    public void OpenInvoiceResponse(DocumentMetadata document)
    {
        // var result = InvoiceResponseHelper.CreateInvoiceResponse(document, "RE", "Some sort of a message");

        // Snackbar.Add("lol");
        invRespDocumentMetadata = document;
        isInvoiceResponseOpen = true;
    }

    private async Task SaveDocument(DownloadedDocument document)
    {
        var path = Preferences.Get(FolderName == "inbox" ? "inboxPath" : "outboxPath", string.Empty, Assembly.GetExecutingAssembly().Location);
        if (string.IsNullOrEmpty(path)) throw new Exception($"{(FolderName == "inbox" ? "Inbox" : "Outbox")} path is not set.");

        var dir = new DirectoryInfo(path);
        if (!dir.Exists) dir.Create();

        var filename = $"{document.DocumentId}.xml";

        var content = Encoding.UTF8.GetString(document.DocumentContent);
        await File.WriteAllTextAsync(Path.Combine(path, filename), content);
    }

    private void ResponseStatus(DocumentMetadata document)
    {
        switch (FolderName)
        {
            case "inbox":
                NavigationManager.NavigateTo($"outbox?documentType=InvoiceResponse&folderName=outbox&documentReference={document.DocumentNo}&recipientEndpointId={document.SenderEndpointId}");
                break;
            case "outbox":
                NavigationManager.NavigateTo($"inbox?documentType=InvoiceResponse&folderName=inbox&documentReference={document.DocumentNo}&senderEndpointId={document.RecipientEndpointId}");
                break;
        }
    }

    private void CloseMetadataView() => isMetadataViewOpen = false;

    private void CloseInvoiceResponse() => isInvoiceResponseOpen = false;

    private void ToggleFiltersPopover() => isFiltersPopoverOpen ^= true;
}
