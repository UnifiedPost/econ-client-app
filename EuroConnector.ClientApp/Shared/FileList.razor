@inject ILogger Logger;
@inject ISnackbar Snackbar;

<div style="margin: 5px 0;">
    @if (Files is null || Files.Count() > 0)
    {
        <MudDataGrid Items="@Files" Dense="true" ReadOnly="true" Elevation="4" HeaderClass="grid-header"
                    RowsPerPage="10" Loading="Loading" LoadingProgressColor="Color.Secondary">
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Filename"/>
                <PropertyColumn Property="x => x.CreationTime" Title="Created At"/>
                <PropertyColumn Property="x => FileSizeDisplay(x.Length)" Title="Size" SortBy="x => x.Length"/>
            </Columns>
            <PagerContent>
                <div class="grid-footer">
                    <MudDataGridPager PageSizeOptions="@(new int[] {5, 10, 25} )" />
                </div>
            </PagerContent>
        </MudDataGrid>
    }

    <div style ="margin-top: 5px;">
        <MudText>Total Files: @Files?.Count()</MudText>
        <EconButton OnClick="@RefreshFiles">Refresh File List</EconButton>
    </div>
</div>

    @code {
    [Parameter]
    public string Path { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public bool Loading { get; set; } = false;

    [Parameter]
    public string SearchPattern { get; set; }

    public List<FileInfo> Files { get; set; }

    protected override void OnParametersSet()
    {
        var path = Preferences.Get(Path, string.Empty);

        if (!string.IsNullOrEmpty(path)) SetFiles(path);
        else
        {
            Logger.Warning("The path for {Name} is not set.", Name);
            Snackbar.Add($"The path for {Name} is not set.", Severity.Error);
        }
    }

    public void RefreshFiles()
    {
        var path = Preferences.Get(Path, string.Empty);
        Logger.Information("Refresh clicked for path {Path}", path);
        SetFiles(path);
        StateHasChanged();
    }

    private void SetFiles(string path)
    {
        var directory = new DirectoryInfo(path);
        if (!directory.Exists) directory.Create();

        if (!string.IsNullOrEmpty(SearchPattern))
        {
            Files = directory.EnumerateFiles(SearchPattern, SearchOption.TopDirectoryOnly).ToList();
            return;
        }

        Files = directory.EnumerateFiles("*", SearchOption.TopDirectoryOnly).ToList();
    }

    private string FileSizeDisplay(long length)
    {
        var result = $"{length} bytes";

        if (length > 1024)
        {
            double kbytes = length / 1024.0;
            result = $"{kbytes:0.###} KB";

            if (kbytes > 1024)
            {
                double mbytes = kbytes / 1024.0;
                result = $"{mbytes:0.###} MB";
            }
        }

        return result;
    }
}
