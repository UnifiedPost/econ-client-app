@using System.Timers;
@using EuroConnector.ClientApp.Data.Interfaces;
@implements IDisposable

@inject ISnackbar Snackbar;
@inject ILogger Logger;
@inject IDocumentService DocumentService;
@inject TimerProvider Timer;

@attribute [Authorize]

@code {
    [CascadingParameter]
    public Error Error { get; set; }

    protected override void OnInitialized()
    {
        var sendDelay = Preferences.Get("sendDelay", 10);

        Timer.SetTimer(sendDelay);
        Timer.Timer.Elapsed += OnTimedEvent;
    }

    private async void OnTimedEvent(object source, ElapsedEventArgs e)
    {
        var outPath = Preferences.Get("outboxPath", string.Empty);
        if (!string.IsNullOrEmpty(outPath))
        {
            var outDir = new DirectoryInfo(outPath);
            var files = outDir.GetFiles();

            if (files.Length == 0) return;
        }

        Snackbar.Add("Automatic document sending has started.", Severity.Info);
        Logger.Information("Automatic document sending has started.");
        try
        {
            await DocumentService.SendDocuments();
            Snackbar.Add("All documents were put into processing successfully.\nOnce processed, they will be moved into Sent or Failed directory. (will require a manual refresh)", Severity.Info);
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
        }
    }

    public void Dispose()
    {
        Timer.DisposeTimer();
    }
}
