@using Blazored.LocalStorage;
@using System.Timers;
@using EuroConnector.ClientApp.Data.Interfaces;
@implements IDisposable

@inject ILocalStorageService LocalStorage;
@inject ISnackbar Snackbar;
@inject ILogger Logger;
@inject IDocumentService DocumentService;
@inject TimerProvider Timer;

@attribute [Authorize]

@code {
    [CascadingParameter]
    public Error Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var sendDelay = await LocalStorage.GetItemAsync<int?>("sendDelay") ?? 10;

        Timer.SetTimer(sendDelay);
        Timer.Timer.Elapsed += OnTimedEvent;
    }

    private async void OnTimedEvent(object source, ElapsedEventArgs e)
    {
        Snackbar.Add("Automatic document sending has started.", Severity.Info);
        Logger.Information("Automatic document sending has started.");
        try
        {
            await DocumentService.SendDocuments();
            Snackbar.Add("All documents were sent successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
        }
    }

    public void Dispose()
    {
        Timer.DisposeTimer();
    }
}
