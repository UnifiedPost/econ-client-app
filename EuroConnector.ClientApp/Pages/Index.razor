@page "/"
@using System.Globalization;
@using Blazored.LocalStorage;
@using EuroConnector.ClientApp.Data.Interfaces;
@using EuroConnector.ClientApp.Data.Models;
@using EuroConnector.ClientApp.Data.Services;

@implements IDisposable

@inject ILocalStorageService LocalStorage;
@inject IVersionService VersionService;
@inject HttpInterceptorService Interceptor;
@inject ILogger Logger;

@attribute [Authorize]

<AuthorizeView Roles="User, Admin, ErpAdmin">
    <MudText Typo="Typo.h3">Home</MudText>

    <div class="time">
        <MudText Typo="Typo.h5">@currentTime</MudText>
    </div>

    <div class="api-info">
        <MudText>API URL: @apiUrl</MudText>
        <MudText>API Version: @(apiVersion is null ? "Loading..." : apiVersion.Version)</MudText>
        <MudText>Release Date: @(apiVersion is null ? "Loading..." : apiVersion.ReleaseDate?.ToString("d") ?? "Error")</MudText>
        <MudText>@(apiVersion is null ? "" : apiVersion.Comment)</MudText>
        <MudText>App Version: 1.1.5</MudText>
    </div>
</AuthorizeView>

@code
    {
    [CascadingParameter]
    public Shared.Error Error { get; set; }

    string currentTime;
    Timer timer;

    string apiUrl;

    ApiVersion apiVersion;

    protected override async Task OnInitializedAsync()
    {
        apiUrl = await LocalStorage.GetItemAsync<string>("apiUrl");

        timer = new Timer(Tick, null, 0, 1000);

        await GetApiInformation();
    }
    
    private async Task GetApiInformation()
    {
        Interceptor.RegisterEvent();

        try
        {
            var response = await VersionService.GetApiVersion();
            apiVersion = response;
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
            apiVersion = new()
            {
                Version = "Error",
            };
        }
    }

    private void Tick(object _)
    {
        currentTime = DateTime.Now.ToString(CultureInfo.CurrentCulture);
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}