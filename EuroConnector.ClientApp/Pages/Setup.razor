@page "/setup"
@using EuroConnector.ClientApp.Data.Interfaces;
@using EuroConnector.ClientApp.Data.Models;

@inject ISetupService SetupService
@inject ISnackbar Snackbar

@attribute [AllowAnonymous]

<div>
    <MudText Typo="Typo.h3">Setup</MudText>

    <MudForm @ref="form" @bind-IsValid="success">
        <MudTextField T="string" @bind-Value="properties.UserName" Required="true"
                      Label="Username" Variant="Variant.Outlined" Margin="Margin.Dense"/>
        <MudTextField T="string" @bind-Value="properties.SecretKey" Required="true" InputType="InputType.Password"
                      Label="Secret Key" Variant="Variant.Outlined" Margin="Margin.Dense"/>
        <MudTextField T="string" @bind-Value="properties.ApiUrl" Required="true"
                      Label="API URL" Variant="Variant.Outlined" Margin="Margin.Dense" />
    </MudForm>

    <MudButton Variant="Variant.Outlined" Color="Color.Inherit" OnClick="OnApplyClicked">Apply</MudButton>
    <MudButton Variant="Variant.Outlined" Color="Color.Inherit" OnClick="OnClearClicked">Clear</MudButton>

    <MudText Typo="@Typo.subtitle1">@requiredMessage</MudText>
</div>

@code {
    [CascadingParameter]
    public Error Error { get; set; }

    bool success;
    MudForm form;
    SetupProperties properties = new();
    string requiredMessage = string.Empty;

    private async Task OnApplyClicked()
    {
        if (success)
        {
            requiredMessage = string.Empty;
            try
            {
                await SetupService.ApplySettings(properties);
                Snackbar.Add("Settings applied successfully.", Severity.Success);
            }
            catch (Exception ex)
            {
                Error.ProcessError(ex);
            }
        }
        else requiredMessage = "All fields are required.";
    }

    private async Task OnClearClicked()
    {
        await SetupService.ClearSettings();
        Snackbar.Add("Settings cleared.", Severity.Success);
    }
}
