@using CommunityToolkit.Maui.Storage;
@using EuroConnector.ClientApp.Data.Interfaces;
@using EuroConnector.ClientApp.Data.Models;

@inject ISetupService SetupService;
@inject ISnackbar Snackbar;
@inject ILogger Logger;

<div>
    <MudText Typo="Typo.h5">Paths</MudText>

    <MudForm @ref="form" @bind-IsValid="success">
        <div class="browse">
            <EconTextField T="string" @bind-Value="@settings.OutboxSpoolPath" Label="Outbox Spool Directory" Class="path-field" />
            <EconButton OnClick='async () => await BrowseClicked("outboxSpool")' Class="browse-button">Browse</EconButton>
        </div>
        <div class="browse">
            <EconTextField T="string" @bind-Value="@settings.OutboxPath" Label="Outbox Directory" Class="path-field" />
            <EconButton OnClick='async () => await BrowseClicked("outbox")' Class="browse-button">Browse</EconButton>
        </div>
        <div class="browse">
            <EconTextField T="string" @bind-Value="@settings.InboxPath" Label="Inbox Directory" Class="path-field" />
            <EconButton OnClick='async () => await BrowseClicked("inbox")' Class="browse-button">Browse</EconButton>
        </div>
        <div class="browse">
            <EconTextField T="string" @bind-Value="@settings.FailedPath" Label="Failed Directory" Class="path-field" />
            <EconButton OnClick='async () => await BrowseClicked("failed")' Class="browse-button">Browse</EconButton>
        </div>
    </MudForm>

    <div class="button-group">
        <EconButton OnClick="OnSaveClicked">Save</EconButton>
        <EconButton OnClick="OnClearClicked">Clear</EconButton>
    </div>
</div>

@code {
    [CascadingParameter]
    public EuroConnector.ClientApp.Shared.Error Error { get; set; }

    MudForm form;
    bool success;
    PathsSettings settings = new();

    protected override void OnInitialized()
    {
        settings = SetupService.GetPathsSettings();
    }

    private async Task BrowseClicked(string field)
    {
        var folderPickerResult = await FolderPicker.PickAsync(GetPath(field), CancellationToken.None);

        if (folderPickerResult.IsSuccessful) SetPath(field, folderPickerResult.Folder.Path);
    }

    private string GetPath(string field)
    {
        switch (field)
        {
            case "outbox":
                return settings.OutboxPath;
            case "outboxSpool":
                return settings.OutboxSpoolPath;
            case "inbox":
                return settings.InboxPath;
            case "failed":
                return settings.FailedPath;
            default:
                return "";
        }
    }

    private void SetPath(string field, string path)
    {
        switch (field)
        {
            case "outbox":
                settings.OutboxPath = path;
                break;
            case "outboxSpool":
                settings.OutboxSpoolPath = path;
                break;
            case "inbox":
                settings.InboxPath = path;
                break;
            case "failed":
                settings.FailedPath = path;
                break;
            default:
                break;
        }
    }

    private void OnSaveClicked()
    {
        Logger.Information("Outbox save clicked.");

        try
        {
            SetupService.ApplyPathsSettings(settings);
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex);
        }

        Snackbar.Add("Settings applied successfully.", Severity.Success);
        Logger.Information("Settings applied successfully.");
    }

    private void OnClearClicked()
    {
        Logger.Information("Settings clear clicked.");
        SetupService.ClearSettings(new List<string> { "outboxSpoolPath", "outboxPath", "inboxPath" });
        settings = new();

        Snackbar.Add("Settings cleared successfully.", Severity.Success);
        Logger.Information("Settings cleared successfully.");
    }
}
